/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22A%3A%5C%5CleafyBuddy%5C%5CleafyBuddyApp%5C%5Csrc%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!":
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22A%3A%5C%5CleafyBuddy%5C%5CleafyBuddyApp%5C%5Csrc%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false! ***!
  \****************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./src/app/page.tsx */ \"(app-pages-browser)/./src/app/page.tsx\", 23));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyQSUzQSU1QyU1Q2xlYWZ5QnVkZHklNUMlNUNsZWFmeUJ1ZGR5QXBwJTVDJTVDc3JjJTVDJTVDYXBwJTVDJTVDcGFnZS50c3glMjIlMkMlMjJpZHMlMjIlM0ElNUIlNUQlN0Qmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSxvS0FBc0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz8zM2U3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiQTpcXFxcbGVhZnlCdWRkeVxcXFxsZWFmeUJ1ZGR5QXBwXFxcXHNyY1xcXFxhcHBcXFxccGFnZS50c3hcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22A%3A%5C%5CleafyBuddy%5C%5CleafyBuddyApp%5C%5Csrc%5C%5Capp%5C%5Cpage.tsx%22%2C%22ids%22%3A%5B%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/page.tsx":
/*!**************************!*\
  !*** ./src/app/page.tsx ***!
  \**************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// // 'use client';\n// // import { useState, useEffect } from 'react';\n// // import { supabase } from '@/lib/supabase';\n// // import { storage } from '@/lib/firebase';\n// // import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n// // import imageCompression from 'browser-image-compression';\n// // interface Tree {\n// //   id: string;\n// //   user_id: string;\n// //   name: string;\n// //   species?: string;\n// //   latitude: number;\n// //   longitude: number;\n// //   image_url: string;\n// //   description?: string;\n// //   planted_date: string;\n// //   created_at: string;\n// // }\n// // export default function Home() {\n// //   const [user, setUser] = useState<any>(null);\n// //   const [trees, setTrees] = useState<Tree[]>([]);\n// //   const [loading, setLoading] = useState(true);\n// //   const [showAddForm, setShowAddForm] = useState(false);\n// //   const [selectedTree, setSelectedTree] = useState<Tree | null>(null);\n// //   // Auth\n// //   useEffect(() => {\n// //     const getUser = async () => {\n// //       const { data: { user } } = await supabase.auth.getUser();\n// //       setUser(user);\n// //       setLoading(false);\n// //     };\n// //     getUser();\n// //     const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\n// //       setUser(session?.user ?? null);\n// //     });\n// //     return () => subscription.unsubscribe();\n// //   }, []);\n// //   // Fetch trees\n// //   useEffect(() => {\n// //     if (user) fetchTrees();\n// //   }, [user]);\n// //   const fetchTrees = async () => {\n// //     const { data } = await supabase\n// //       .from('trees')\n// //       .select('*')\n// //       .eq('user_id', user.id)\n// //       .order('created_at', { ascending: false });\n// //     setTrees(data || []);\n// //   };\n// //   const signInWithGoogle = async () => {\n// //     await supabase.auth.signInWithOAuth({\n// //       provider: 'google',\n// //       options: { redirectTo: `${window.location.origin}/` }\n// //     });\n// //   };\n// //   const signOut = () => supabase.auth.signOut();\n// //   if (loading) return <div className=\"p-8\">Loading...</div>;\n// //   if (!user) {\n// //     return (\n// //       <div className=\"min-h-screen flex items-center justify-center p-4\">\n// //         <div className=\"text-center\">\n// //           <h1 className=\"text-4xl font-bold mb-4\">🌳 myTree</h1>\n// //           <p className=\"text-gray-600 mb-8\">Track your trees around the world</p>\n// //           <button\n// //             onClick={signInWithGoogle}\n// //             className=\"px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600\"\n// //           >\n// //             Sign in with Google\n// //           </button>\n// //         </div>\n// //       </div>\n// //     );\n// //   }\n// //   return (\n// //     <div className=\"min-h-screen bg-gray-50\">\n// //       {/* Header */}\n// //       <header className=\"bg-white shadow p-4\">\n// //         <div className=\"max-w-4xl mx-auto flex justify-between items-center\">\n// //           <div>\n// //             <h1 className=\"text-2xl font-bold\">🌳 myTree</h1>\n// //             <p className=\"text-sm text-gray-600\">{trees.length} trees planted</p>\n// //           </div>\n// //           <div className=\"flex gap-4\">\n// //             <button\n// //               onClick={() => setShowAddForm(true)}\n// //               className=\"px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600\"\n// //             >\n// //               + Add Tree\n// //             </button>\n// //             <button\n// //               onClick={signOut}\n// //               className=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\"\n// //             >\n// //               Sign Out\n// //             </button>\n// //           </div>\n// //         </div>\n// //       </header>\n// //       {/* Main Content */}\n// //       <main className=\"max-w-4xl mx-auto p-4\">\n// //         {trees.length === 0 ? (\n// //           <div className=\"text-center py-12\">\n// //             <div className=\"text-6xl mb-4\">🌱</div>\n// //             <h2 className=\"text-2xl font-bold mb-4\">Plant Your First Tree!</h2>\n// //             <button\n// //               onClick={() => setShowAddForm(true)}\n// //               className=\"px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600\"\n// //             >\n// //               Add Your First Tree\n// //             </button>\n// //           </div>\n// //         ) : (\n// //           <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n// //             {trees.map((tree) => (\n// //               <div key={tree.id} className=\"bg-white rounded-lg shadow p-4\">\n// //                 <img\n// //                   src={tree.image_url}\n// //                   alt={tree.name}\n// //                   className=\"w-full h-48 object-cover rounded mb-4\"\n// //                 />\n// //                 <h3 className=\"font-bold text-lg\">{tree.name}</h3>\n// //                 {tree.species && <p className=\"text-gray-600\">{tree.species}</p>}\n// //                 <p className=\"text-sm text-gray-500 mt-2\">\n// //                   Planted: {new Date(tree.planted_date).toLocaleDateString()}\n// //                 </p>\n// //                 <button\n// //                   onClick={() => setSelectedTree(tree)}\n// //                   className=\"mt-2 px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600\"\n// //                 >\n// //                   View Details\n// //                 </button>\n// //               </div>\n// //             ))}\n// //           </div>\n// //         )}\n// //       </main>\n// //       {/* Add Tree Modal */}\n// //       {showAddForm && <AddTreeModal onClose={() => setShowAddForm(false)} onSuccess={fetchTrees} />}\n// //       {/* Tree Details Modal */}\n// //       {selectedTree && <TreeModal tree={selectedTree} onClose={() => setSelectedTree(null)} />}\n// //     </div>\n// //   );\n// // }\n// // // Add Tree Modal Component\n// // function AddTreeModal({ onClose, onSuccess }: { onClose: () => void; onSuccess: () => void }) {\n// //   const [loading, setLoading] = useState(false);\n// //   const [location, setLocation] = useState<{ lat: number; lng: number } | null>(null);\n// //   const [formData, setFormData] = useState({\n// //     name: '',\n// //     species: '',\n// //     description: '',\n// //     image: null as File | null,\n// //   });\n// //   const getCurrentLocation = () => {\n// //     navigator.geolocation.getCurrentPosition(\n// //       (position) => setLocation({ lat: position.coords.latitude, lng: position.coords.longitude }),\n// //       () => alert('Unable to get location')\n// //     );\n// //   };\n// //   const handleSubmit = async (e: React.FormEvent) => {\n// //     e.preventDefault();\n// //     if (!location || !formData.image) return alert('Please add location and image');\n// //     setLoading(true);\n// //     try {\n// //       const { data: { user } } = await supabase.auth.getUser();\n// //       // Upload image\n// //       const compressedImage = await imageCompression(formData.image, { maxSizeMB: 1 });\n// //       const imageRef = ref(storage, `trees/${user!.id}/${Date.now()}`);\n// //       const snapshot = await uploadBytes(imageRef, compressedImage);\n// //       const imageUrl = await getDownloadURL(snapshot.ref);\n// //       // Save to database\n// //       await supabase.from('trees').insert({\n// //         user_id: user!.id,\n// //         name: formData.name,\n// //         species: formData.species,\n// //         latitude: location.lat,\n// //         longitude: location.lng,\n// //         image_url: imageUrl,\n// //         description: formData.description,\n// //         planted_date: new Date().toISOString(),\n// //       });\n// //       onSuccess();\n// //       onClose();\n// //     } catch (error) {\n// //       alert('Failed to add tree');\n// //     }\n// //     setLoading(false);\n// //   };\n// //   return (\n// //     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n// //       <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n// //         <h2 className=\"text-xl font-bold mb-4\">Add New Tree</h2>\n// //         <form onSubmit={handleSubmit} className=\"space-y-4\">\n// //           <input\n// //             type=\"text\"\n// //             placeholder=\"Tree Name\"\n// //             required\n// //             value={formData.name}\n// //             onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n// //             className=\"w-full p-2 border rounded\"\n// //           />\n// //           <input\n// //             type=\"text\"\n// //             placeholder=\"Species (optional)\"\n// //             value={formData.species}\n// //             onChange={(e) => setFormData({ ...formData, species: e.target.value })}\n// //             className=\"w-full p-2 border rounded\"\n// //           />\n// //           <input\n// //             type=\"file\"\n// //             accept=\"image/*\"\n// //             required\n// //             onChange={(e) => setFormData({ ...formData, image: e.target.files?.[0] || null })}\n// //             className=\"w-full p-2 border rounded\"\n// //           />\n// //           <button\n// //             type=\"button\"\n// //             onClick={getCurrentLocation}\n// //             className=\"w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n// //           >\n// //             {location ? `📍 ${location.lat.toFixed(4)}, ${location.lng.toFixed(4)}` : 'Get Location'}\n// //           </button>\n// //           <textarea\n// //             placeholder=\"Description (optional)\"\n// //             value={formData.description}\n// //             onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n// //             className=\"w-full p-2 border rounded\"\n// //             rows={3}\n// //           />\n// //           <div className=\"flex gap-2\">\n// //             <button type=\"button\" onClick={onClose} className=\"flex-1 p-2 border rounded\">\n// //               Cancel\n// //             </button>\n// //             <button\n// //               type=\"submit\"\n// //               disabled={loading}\n// //               className=\"flex-1 p-2 bg-green-500 text-white rounded hover:bg-green-600 disabled:opacity-50\"\n// //             >\n// //               {loading ? 'Adding...' : 'Add Tree'}\n// //             </button>\n// //           </div>\n// //         </form>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n// // // Tree Details Modal Component\n// // function TreeModal({ tree, onClose }: { tree: Tree; onClose: () => void }) {\n// //   return (\n// //     <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n// //       <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n// //         <div className=\"flex justify-between items-start mb-4\">\n// //           <h2 className=\"text-xl font-bold\">{tree.name}</h2>\n// //           <button onClick={onClose} className=\"text-gray-500 hover:text-gray-700 text-xl\">×</button>\n// //         </div>\n// //         <img src={tree.image_url} alt={tree.name} className=\"w-full h-48 object-cover rounded mb-4\" />\n// //         {tree.species && <p><strong>Species:</strong> {tree.species}</p>}\n// //         <p><strong>Planted:</strong> {new Date(tree.planted_date).toLocaleDateString()}</p>\n// //         <p><strong>Location:</strong> {tree.latitude.toFixed(4)}, {tree.longitude.toFixed(4)}</p>\n// //         {tree.description && <p className=\"mt-2\"><strong>Story:</strong> {tree.description}</p>}\n// //         <button\n// //           onClick={onClose}\n// //           className=\"w-full mt-4 p-2 bg-gray-500 text-white rounded hover:bg-gray-600\"\n// //         >\n// //           Close\n// //         </button>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n// // export default function Home() {\n// //   return (\n// //     <div className=\"min-h-screen bg-gray-50 p-8\">\n// //       <div className=\"max-w-4xl mx-auto\">\n// //         <h1 className=\"text-4xl font-bold text-center mb-8\">🌳 myTree</h1>\n// //         <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n// //           <p className=\"text-lg mb-4\">Welcome to myTree!</p>\n// //           <p className=\"text-gray-600\">Your tree tracking app is ready.</p>\n// //         </div>\n// //       </div>\n// //     </div>\n// //   );\n// // }\n// 'use client';\n// import { useState, useEffect } from 'react';\n// import { supabase } from '@/lib/supabase';\n// export default function Home() {\n//   const [user, setUser] = useState<any>(null);\n//   const [loading, setLoading] = useState(true);\n//   useEffect(() => {\n//     const getUser = async () => {\n//       try {\n//         const { data: { user } } = await supabase.auth.getUser();\n//         setUser(user);\n//       } catch (error) {\n//         console.error('Auth error:', error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     getUser();\n//     const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {\n//       setUser(session?.user ?? null);\n//     });\n//     return () => subscription.unsubscribe();\n//   }, []);\n//   const signInWithGoogle = async () => {\n//     await supabase.auth.signInWithOAuth({\n//       provider: 'google',\n//       options: { redirectTo: `${window.location.origin}/` }\n//     });\n//   };\n//   const signOut = () => supabase.auth.signOut();\n//   if (loading) {\n//     return (\n//       <div className=\"min-h-screen bg-gray-50 p-8\">\n//         <div className=\"max-w-4xl mx-auto text-center\">\n//           <p>Loading...</p>\n//         </div>\n//       </div>\n//     );\n//   }\n//   if (!user) {\n//     return (\n//       <div className=\"min-h-screen bg-gray-50 p-8\">\n//         <div className=\"max-w-4xl mx-auto\">\n//           <h1 className=\"text-4xl font-bold text-center mb-8\">🌳 myTree</h1>\n//           <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n//             <p className=\"text-lg mb-4\">Track your trees around the world</p>\n//             <button\n//               onClick={signInWithGoogle}\n//               className=\"px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600\"\n//             >\n//               Sign in with Google\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n//   return (\n//     <div className=\"min-h-screen bg-gray-50 p-8\">\n//       <div className=\"max-w-4xl mx-auto\">\n//         <div className=\"flex justify-between items-center mb-8\">\n//           <h1 className=\"text-4xl font-bold\">🌳 myTree</h1>\n//           <button\n//             onClick={signOut}\n//             className=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600\"\n//           >\n//             Sign Out\n//           </button>\n//         </div>\n//         <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n//           <p className=\"text-lg mb-4\">Welcome, {user.email}!</p>\n//           <p className=\"text-gray-600\">Your tree tracking app is ready.</p>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/page.tsx\n"));

/***/ })

});